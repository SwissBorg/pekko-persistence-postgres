pekko {
  stdout-loglevel = off // defaults to WARNING can be disabled with off. The stdout-loglevel is only in effect during system startup and shutdown
  log-dead-letters-during-shutdown = on
  loglevel = WARNING
  log-dead-letters = on
  log-config-on-start = off // Log the complete configuration at INFO level when the actor system is started

  loggers = ["org.apache.pekko.event.slf4j.Slf4jLogger"]
  logging-filter = "org.apache.pekko.event.slf4j.Slf4jLoggingFilter"

  persistence {
    journal.plugin = "postgres-journal"
    snapshot-store.plugin = "postgres-snapshot-store"
  }

  actor {
    serialize-messages = off // verify that messages are serializable

    debug {
      receive = on // log all messages sent to an actor if that actors receive method is a LoggingReceive
      autoreceive = on // log all special messages like Kill, PoisoffPill etc sent to all actors
      lifecycle = on // log all actor lifecycle events of all actors
      fsm = off // enable logging of all events, transitioffs and timers of FSM Actors that extend LoggingFSM
      event-stream = on // enable logging of subscriptions (subscribe/unsubscribe) on the ActorSystem.eventStream
    }

    serializers {
      jackson-cbor = "org.apache.pekko.serialization.jackson.JacksonCborSerializer"
    }
  }
}

slick {
  profile = "org.apache.pekko.persistence.postgres.db.ExtendedPostgresProfile$"
  db {
    host = "localhost"
    url = "jdbc:postgresql://"localhost":5432/docker?reWriteBatchedInserts=true"
    user = "docker"
    password = "docker"

    driver = "org.postgresql.Driver"
  }
}

postgres-journal {
  slick = ${slick}
  tables {
    journal {
      schemaName = "migration"
      tableName = "fancy_journal"
      columnNames = {
        tags = "j_tags"
        created = "j_created"
        deleted = "j_del"
        message = "j_msg"
        metadata = "j_meta"
        persistenceId = "j_per_id"
        sequenceNumber = "j_seq_num"
        ordering = "j_ord"
      }
      partitions {
        prefix = "fancy_j"
        size = 50
      }
    }
    journalMetadata {
      schemaName = "migration"
      tableName = "fancy_journal_metadata"
      columnNames = {
        persistenceId = "jm_per_id"
        maxSequenceNumber = "jm_max_seq_num"
        maxOrdering = "jm_max_ord"
        minOrdering = "jm_min_ord"
      }
    }
    tags {
      schemaName = "migration"
      tableName = "fancy_tags"
      columnNames {
        id = "t_id"
        name = "t_name"
      }
    }
  }
}

postgres-read-journal {
  slick = ${slick}
  tables = ${postgres-journal.tables}

  // We do not want to wait for JournalSequenceAcor
  journal-sequence-retrieval {
    batch-size = 10000
    max-tries = 1
    query-delay = 100 millis
    max-backoff-query-delay = 100 millis
    ask-timeout = 100 millis
  }

}

postgres-snapshot-store {
  slick = ${slick}
  tables {
    snapshot {
      schemaName = "migration"
      tableName = "fancy_snapshot"
      columnNames {
        persistenceId = "s_per_id"
        sequenceNumber = "s_seq_num"
        created = "s_created"
        snapshot = "s_snapshot"
        metadata = "s_meta"
      }
    }
  }
}
